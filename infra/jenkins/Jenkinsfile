pipeline {
    agent any

    parameters {
        gitParameter(name: 'BRANCH_TO_DEPLOY', branch: '', branchFilter: 'origin/(.*)', defaultValue: 'main',
        quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*',
        type: 'GitParameterDefinition', useRepository: 'https://github.com/yanpgabriel/DuckApp.git')

        string(name: 'DOCKER_HOST', defaultValue: '192.168.0.69:2375', trim: true)
        string(name: 'DOCKER_IMAGE', defaultValue: 'localhost:5000/duckapp:pi', trim: true)
    }

    environment {
        GIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        COMMITER_NAME = sh(script: 'git show -s --pretty=%an', returnStdout: true).trim()
        COMMITER_EMAIL = sh(script: 'git show -s --format=%ae', returnStdout: true).trim()
        COMMITER_COMMENT = sh(script: 'git show -s --pretty=%B', returnStdout: true).trim()

        NODE_IMAGE = 'node:18.14.2'
        SCANNER_HOME = tool 'SonarScannerJenkins'

        NAMESPACE = 'duck-namespace'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds(abortPrevious: true)
    }

    stages {
        stage('Checkout') {
            steps {
                // Limpa o Workspace
                cleanWs()
                sh "echo Clonando a branch selecionada '${BRANCH_TO_DEPLOY}'"
                // Baixa o codigo
                git branch: "${BRANCH_TO_DEPLOY}", url: 'https://github.com/yanpgabriel/DuckApp.git'
            }
        }
        stage('Analise SonarQube') {
            agent {
              docker {
                image 'openjdk:17'
                reuseNode true
              }
            }
            steps {
                withSonarQubeEnv(installationName: 'RaspSonar') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }
        stage('Instalando dependencias') {
            agent {
              docker {
                image NODE_IMAGE
                reuseNode true
                label 'node-agent'
              }
            }
            steps {
                sh 'npm install -g pnpm'
                sh 'pnpm install --verbose'
            }
        }
        stage('Build') {
            agent {
              docker {
                image NODE_IMAGE
                reuseNode true
                label 'node-agent'
              }
            }
            steps {
                configFileProvider([configFile(fileId: '21e1e978-2116-4060-bdc9-3e21e7782c37', targetLocation: './src/environments')]) {
                    sh 'pnpm run build'
                }
            }
        }
        stage('Gerar arquivo compactado') {
            steps {
                sh 'tar czf duckapp.tar.gz dist/DuckApp'
            }
        }
        stage('Arquivar artefato') {
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'duckapp.tar.gz', followSymlinks: false, onlyIfSuccessful: true
            }
        }
        stage('Gerar Imagem Docker') {
            steps {
                sh "docker -H tcp://${DOCKER_HOST} build -f infra/docker/Dockerfile -t ${DOCKER_IMAGE} ."
            }
        }
        stage('Publicar Imagem Docker') {
            steps {
                sh "docker -H tcp://${DOCKER_HOST} push ${DOCKER_IMAGE}"
            }
        }
    }
}
